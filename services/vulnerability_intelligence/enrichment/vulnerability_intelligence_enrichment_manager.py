from typing import List, Dict
from concurrent.futures import ThreadPoolExecutor, as_completed
from models.vulnerability_intelligence import VulnerabilityIntelligence

from services.vulnerability_intelligence.enrichment.enrichment.cisa_kev import cisa_kev_enrich_vulnerability
from services.vulnerability_intelligence.enrichment.enrichment.github import github_fetch_cve_data
from services.vulnerability_intelligence.enrichment.enrichment.github_poc import fetch_github_poc_data
from services.vulnerability_intelligence.enrichment.enrichment.vulners import vulners_find_related_cve_data
from services.vulnerability_intelligence.handlers.github_poc_handler import GitHubPoCHandler
from services.vulnerability_intelligence.handlers.vulners_handler import VulnersHandler
from services.vulnerability_intelligence.handlers.github_handler import GitHubHandler
from services.vulnerability_intelligence.handlers.cisa_kev_handler import CisaKevHandler
import logging

class VulnerabilityIntelligenceEnrichmentManager:
    def __init__(self, vulnerability_intelligence_list: List[VulnerabilityIntelligence], config_file: str = 'config.yaml'):
        self.vulnerability_intelligence_list = vulnerability_intelligence_list

        self.enrichment_functions = {
            "Vulners": vulners_find_related_cve_data,
            "GitHub": github_fetch_cve_data,
            "GitHubPoc": fetch_github_poc_data,
            "CISA KEV": cisa_kev_enrich_vulnerability 
        }

        self.handlers = {
            "Vulners": VulnersHandler,
            "GitHub": GitHubHandler,
            "GitHubPoc": GitHubPoCHandler,
            "CISA KEV": CisaKevHandler
        }

    def enrich(self) -> List[VulnerabilityIntelligence]:
        with ThreadPoolExecutor(max_workers=20) as executor:
            future_to_vuln = {
                executor.submit(self._get_enrichment_data, vuln_intelligence): vuln_intelligence
                for vuln_intelligence in self.vulnerability_intelligence_list
                if vuln_intelligence.id.startswith("CVE-")
            }

            for future in as_completed(future_to_vuln):
                vuln_intelligence = future_to_vuln[future]
                try:
                    enrichment_data = future.result()
                    if enrichment_data:
                        self._apply_enrichment(vuln_intelligence, enrichment_data)
                except Exception as e:
                    logging.error(f"Error enriching data for {vuln_intelligence.id}: {e}")

        return self.vulnerability_intelligence_list

    def _get_enrichment_data(self, vuln_intelligence: VulnerabilityIntelligence) -> Dict:
        enrichment_data = {}

        for source_name, func in self.enrichment_functions.items():
            try:
                data = func(vuln_intelligence.id)
                enrichment_data[source_name] = data
            except Exception as e:
                logging.error(f"Error in {func.__name__} for CVE {vuln_intelligence.id}: {e}")

        return enrichment_data

    def _apply_enrichment(self, vuln_intelligence: VulnerabilityIntelligence, enrichment_data: Dict):
        for source, data in enrichment_data.items():
            handler_class = self.handlers.get(source)
            if handler_class:
                handler = handler_class(data)
                handler.apply(vuln_intelligence)
            else:
                logging.warning(f"No handler found for source: {source}")
