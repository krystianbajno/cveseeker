import os
import time
import httpx
import zipfile
from typing import Dict, Optional
from threading import Lock

CACHE_DIR = "cache"
REPO_URL = "https://github.com/trickest/cve/archive/refs/heads/main.zip"
CACHE_DURATION = 86400  # 1 day

repo_download_lock = Lock()
cve_data_cache = None
cache_lock = Lock()

def ensure_cache_dir():
    if not os.path.exists(CACHE_DIR):
        try:
            os.makedirs(CACHE_DIR)
            print(f"[+] Created cache directory at '{CACHE_DIR}'.")
        except Exception as e:
            print(f"[!] Failed to create cache directory '{CACHE_DIR}': {e}")


def download_repo_as_zip() -> Optional[str]:
    repo_zip_path = os.path.join(CACHE_DIR, "cve-main.zip")

    if os.path.exists(repo_zip_path):
        repo_mtime = os.path.getmtime(repo_zip_path)
        current_time = time.time()
        if (current_time - repo_mtime) < CACHE_DURATION:
            return repo_zip_path

    with repo_download_lock:
        if os.path.exists(repo_zip_path):
            repo_mtime = os.path.getmtime(repo_zip_path)
            current_time = time.time()
            if (current_time - repo_mtime) < CACHE_DURATION:
                return repo_zip_path

        try:
            print("[*] Downloading CVE repository as zip...")
            response = httpx.get(REPO_URL, timeout=30, follow_redirects=True)
            if response.status_code == 200:
                with open(repo_zip_path, "wb") as f:
                    f.write(response.content)
                print("[+] CVE repository downloaded successfully.")
                return repo_zip_path
            else:
                print(f"[!] Failed to download repository. Status code: {response.status_code}")
        except Exception as e:
            print(f"[*] Error downloading repository: {e}")

    return None


def load_cve_data_into_memory():
    global cve_data_cache

    with cache_lock:
        if cve_data_cache is not None:
            return

        repo_zip_path = download_repo_as_zip()

        if not repo_zip_path:
            print("Failed to load CVE repository. Falling back to empty cache.")
            cve_data_cache = {}
            return

        try:
            print("[*] Loading CVE data into memory...")
            temp_cache = {}
            with zipfile.ZipFile(repo_zip_path, "r") as zip_ref:
                for file_name in zip_ref.namelist():
                    if file_name.endswith(".md"):
                        year, cve_file = file_name.split('/')[-2:]
                        cve_id = cve_file.replace(".md", "")
                        with zip_ref.open(file_name) as f:
                            temp_cache[cve_id] = f.read().decode("utf-8")
            cve_data_cache = temp_cache
        except zipfile.BadZipFile:
            print("Invalid ZIP file format. Please verify the downloaded repository.")
            cve_data_cache = {}
        except Exception as e:
            print(f"Error loading CVE data into memory: {e}")
            cve_data_cache = {}


def github_fetch_cve_data_cached(cve: str) -> Dict:
    global cve_data_cache

    if cve_data_cache is None:
        load_cve_data_into_memory()

    data = {
        'github_related_urls': [],
        'github_description': None,
        'github_product': None,
        'github_version': None,
        'github_cwe': None,
        'github_pocs': [],
        'github_mitigation': None,
        'github_tags': []
    }

    cve_content = cve_data_cache.get(cve)
    if not cve_content:
        return data

    try:
        lines = cve_content.splitlines()
        description = []
        in_description = False

        for line in lines:
            if line.startswith('- https://github.com/'):
                data['github_related_urls'].append(line.strip("- "))

            elif line.startswith('### Description'):
                in_description = True

            elif in_description:
                if line.startswith('###') and not line.startswith('### Description'):
                    in_description = False
                else:
                    description.append(line.strip())

            elif line.startswith('![](https://img.shields.io/static/v1?label=Product'):
                product_info = line.split('message=')[-1].split('&')[0].replace('%20', ' ')
                data['github_product'] = product_info.strip()

            elif line.startswith('![](https://img.shields.io/static/v1?label=Version'):
                version_info = line.split('message=')[-1].split('&')[0].replace('%20', ' ')
                data['github_version'] = version_info.strip()

            elif 'label=Vulnerability' in line and 'CWE-' in line:
                cwe_info = line.split('message=')[-1].split('&')[0].replace('%20', ' ')
                data['github_cwe'] = cwe_info.strip()

            elif line.lower().startswith('#### github'):
                pocs = []
                poc_index = lines.index(line) + 1
                while poc_index < len(lines) and lines[poc_index].startswith('- '):
                    poc_link = lines[poc_index].split('- ')[1].strip()
                    pocs.append(poc_link)
                    poc_index += 1
                data['github_pocs'].extend(pocs)

            elif 'mitigates this vulnerability' in line.lower():
                mitigation_index = lines.index(line)
                mitigation_info = []
                while mitigation_index < len(lines) and not lines[mitigation_index].startswith('###'):
                    mitigation_info.append(lines[mitigation_index].strip())
                    mitigation_index += 1
                data['github_mitigation'] = ' '.join(mitigation_info)

        data['github_description'] = ' '.join(description) if description else None

    except Exception as e:
        print(f"[!] Error parsing data for CVE {cve}: {e}")

    return data
