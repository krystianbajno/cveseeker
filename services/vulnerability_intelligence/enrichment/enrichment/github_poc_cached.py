from typing import List, Dict
from dateutil import parser as dateutil_parser
from services.cache.cache_manager import CacheManager

def fetch_github_poc_cached_data(cve: str, cache_manager: CacheManager) -> List[Dict]:
    cache_manager.wait_for_data('github_poc_cached')
    
    in_memory_poc_cache = cache_manager.get_data('github_poc_cached')
    
    if not in_memory_poc_cache:
        print("[!] GitHub PoC data is unavailable.")
        return []

    year = cve.split('-')[1]
    poc_file_path_in_memory = f"PoC-in-GitHub-master/{year}/{cve}.json"

    pocs = []

    try:
        if poc_file_path_in_memory in in_memory_poc_cache:
            json_data = in_memory_poc_cache[poc_file_path_in_memory]
            for entry in json_data:
                data = {
                    'github_url': entry.get("html_url", "N/A"),
                    'github_description': entry.get("description"),
                    'github_date': dateutil_parser.parse(entry["created_at"]).strftime('%Y-%m-%d') if "created_at" in entry else "N/A",
                    'github_tags': entry.get("topics", []),
                    'github_stars': entry.get("stargazers_count", 0)
                }
                pocs.append(data)
    except Exception as e:
        print(f"[!] Error fetching data for CVE {cve} from cache: {e}")

    return pocs
