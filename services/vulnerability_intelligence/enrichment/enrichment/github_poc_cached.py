import os
import time
import zipfile
import json
from typing import List, Dict
from threading import Lock
from dateutil import parser as dateutil_parser
import httpx

CACHE_DIR = "cache"
REPO_URL = "https://github.com/nomi-sec/PoC-in-GitHub/archive/refs/heads/master.zip"
CACHE_DURATION = 86400  # 1 day

repo_download_lock = Lock()
cache_lock = Lock()

in_memory_poc_cache = None

def ensure_cache_dir():
    if not os.path.exists(CACHE_DIR):
        try:
            os.makedirs(CACHE_DIR)
            print(f"[+] Created cache directory at '{CACHE_DIR}'.")
        except Exception as e:
            print(f"[!] Failed to create cache directory '{CACHE_DIR}': {e}")


def download_repo_as_zip() -> str:
    repo_zip_path = os.path.join(CACHE_DIR, "PoC-in-GitHub.zip")

    if os.path.exists(repo_zip_path):
        repo_mtime = os.path.getmtime(repo_zip_path)
        current_time = time.time()
        if (current_time - repo_mtime) < CACHE_DURATION:
            return repo_zip_path

    with repo_download_lock:
        if os.path.exists(repo_zip_path):
            repo_mtime = os.path.getmtime(repo_zip_path)
            current_time = time.time()
            if (current_time - repo_mtime) < CACHE_DURATION:
                return repo_zip_path

        try:
            print("[*] Downloading GitHub PoC repository as zip...")
            response = httpx.get(REPO_URL, timeout=30, follow_redirects=True)
            if response.status_code == 200:
                with open(repo_zip_path, "wb") as f:
                    f.write(response.content)
                print("[+] GitHub PoC repository downloaded successfully.")
                return repo_zip_path
            else:
                print(f"[!] Failed to download repository. Status code: {response.status_code}")
        except Exception as e:
            print(f"[!] Error downloading repository: {e}")

    return ""


def load_poc_repository_into_memory():
    global in_memory_poc_cache

    with cache_lock:
        if in_memory_poc_cache is not None:
            return

        repo_zip_path = download_repo_as_zip()
        if not repo_zip_path:
            print("[!] Failed to load PoC repository. Falling back to empty cache.")
            in_memory_poc_cache = {}
            return

        try:
            print("[*] Loading PoC repository into memory...")
            temp_cache = {}
            with zipfile.ZipFile(repo_zip_path, "r") as zip_ref:
                for file_name in zip_ref.namelist():
                    if file_name.endswith(".json"):
                        try:
                            temp_cache[file_name] = json.loads(zip_ref.read(file_name).decode('utf-8'))
                        except json.JSONDecodeError as e:
                            print(f"[!] Skipping invalid JSON file '{file_name}': {e}")
            in_memory_poc_cache = temp_cache
        except zipfile.BadZipFile:
            print("[!] Invalid ZIP file format. Please verify the downloaded repository.")
            in_memory_poc_cache = {}
        except Exception as e:
            print(f"[!] Error loading PoC repository into memory: {e}")
            in_memory_poc_cache = {}


def fetch_github_poc_cached_data(cve: str) -> List[Dict]:
    global in_memory_poc_cache
    ensure_cache_dir()

    if in_memory_poc_cache is None:
        load_poc_repository_into_memory()

    year = cve.split('-')[1]
    poc_file_path_in_memory = f"PoC-in-GitHub-master/{year}/{cve}.json"

    pocs = []

    try:
        if poc_file_path_in_memory in in_memory_poc_cache:
            json_data = in_memory_poc_cache[poc_file_path_in_memory]
            for entry in json_data:
                data = {
                    'github_url': entry.get("html_url", "N/A"),
                    'github_description': entry.get("description"),
                    'github_date': dateutil_parser.parse(entry["created_at"]).strftime('%Y-%m-%d') if "created_at" in entry else "N/A",
                    'github_tags': entry.get("topics", []),
                    'github_stars': entry.get("stargazers_count", 0)
                }
                pocs.append(data)
    except Exception as e:
        print(f"[!] Error fetching data for CVE {cve} from cache: {e}")

    return pocs
