from typing import Dict
from services.cache.cache_manager import CacheManager
import re

def github_fetch_cve_data_cached(cve: str, cache_manager: CacheManager) -> Dict:
    cache_manager.wait_for_data('trickest_cve_github_cached')
    
    cve_data_cache = cache_manager.get_data('trickest_cve_github_cached')
    
    if not cve_data_cache:
        print("[!] GitHub CVE data is unavailable.")
        return {}
    
    data = {
        'cve_id': cve,
        'cve_link': None,
        'github_related_urls': [],
        'github_description': None,
        'github_products': [],
        'github_versions': [],
        'github_cwe': [],
        'github_vulnerability_type': [],
        'github_pocs': [],
        'github_mitigation': None,
        'github_tags': [],
        'github_references': [],
    }
    
    cve_content = cve_data_cache.get(cve)
    if not cve_content:
        return data
    
    try:
        lines = cve_content.splitlines()
        description_lines = []
        mitigation_lines = []
        in_description = False
        current_section = None
        
        for idx, line in enumerate(lines):
            line = line.strip()
            
            if line.startswith('### [' + cve + ']('):
                match = re.search(r'\((.*?)\)', line)
                if match:
                    data['cve_link'] = match.group(1)
            
            elif line.startswith('![](https://img.shields.io/static/v1?label='):
                badge_info = extract_badge_info(line)
                label = badge_info['label']
                message = badge_info['message']
                if message.lower() == 'n/a':
                    continue  # Skip 'n/a' values
                if label == 'Product':
                    data['github_products'].append(message)
                elif label == 'Version':
                    data['github_versions'].append(message)
                elif label == 'Vulnerability':
                    if 'CWE-' in message:
                        data['github_cwe'].append(message)
                    else:
                        data['github_vulnerability_type'].append(message)
                elif label == 'CWE':
                    data['github_cwe'].append(message)
            
            elif line.startswith('### Description'):
                in_description = True
                current_section = 'description'
            
            elif line.startswith('### Mitigation') or line.startswith('### Workarounds'):
                current_section = 'mitigation'
                in_description = False
            
            elif line.startswith('### POC'):
                current_section = 'poc'
                in_description = False
            
            elif line.startswith('#### Reference'):
                current_section = 'reference'
            
            elif line.startswith('#### Github'):
                current_section = 'github'
            
            elif line.startswith('###') and not line.startswith('### Description') and not line.startswith('### Mitigation') and not line.startswith('### Workarounds'):
                in_description = False
                current_section = None
            
            else:
                if in_description:
                    description_lines.append(line)
                elif current_section == 'reference':
                    if line.startswith('- '):
                        ref_url = line[2:].strip()
                        if ref_url.lower().startswith('no pocs from references'):
                            continue  # Skip this line
                        data['github_references'].append(ref_url)
                elif current_section == 'github':
                    if line.startswith('- '):
                        github_url = line[2:].strip()
                        data['github_related_urls'].append(github_url)
                elif current_section == 'poc':
                    if line.startswith('- '):
                        poc_url = line[2:].strip()
                        data['github_pocs'].append(poc_url)
                elif current_section == 'mitigation':
                    mitigation_lines.append(line)
        
        if description_lines:
            data['github_description'] = ' '.join(description_lines)
        
        if mitigation_lines:
            data['github_mitigation'] = ' '.join(mitigation_lines)
        
        data['github_products'] = list(set(data['github_products']))
        data['github_versions'] = list(set(data['github_versions']))
        data['github_cwe'] = list(set(data['github_cwe']))
        data['github_vulnerability_type'] = list(set(data['github_vulnerability_type']))
        data['github_related_urls'] = list(set(data['github_related_urls']))
        data['github_references'] = list(set(data['github_references']))
        data['github_pocs'] = list(set(data['github_pocs']))
    
    except Exception as e:
        print(f"[!] Error parsing data for CVE {cve}: {e}")
    
    return data

def extract_badge_info(line: str) -> Dict[str, str]:
    match = re.search(r'label=(.*?)&message=(.*?)&', line)
    if match:
        label = match.group(1).replace('%20', ' ').strip()
        message = match.group(2).replace('%20', ' ').strip()
        return {'label': label, 'message': message}
    else:
        parts = line.split('label=')[-1].split('&message=')
        if len(parts) == 2:
            label = parts[0].replace('%20', ' ').strip()
            message = parts[1].split('&')[0].replace('%20', ' ').strip()
            return {'label': label, 'message': message}
    return {'label': '', 'message': ''}
