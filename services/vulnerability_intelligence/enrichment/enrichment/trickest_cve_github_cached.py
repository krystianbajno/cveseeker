from typing import Dict
from services.cache.cache_manager import CacheManager

def github_fetch_cve_data_cached(cve: str, cache_manager: CacheManager) -> Dict:
    cache_manager.wait_for_data('github_cached')
    
    cve_data_cache = cache_manager.get_data('github_cached')
    
    if not cve_data_cache:
        print("[!] GitHub CVE data is unavailable.")
        return {}

    data = {
        'github_related_urls': [],
        'github_description': None,
        'github_product': None,
        'github_version': None,
        'github_cwe': None,
        'github_pocs': [],
        'github_mitigation': None,
        'github_tags': []
    }

    cve_content = cve_data_cache.get(cve)
    if not cve_content:
        return data

    try:
        lines = cve_content.splitlines()
        description = []
        in_description = False

        for idx, line in enumerate(lines):
            if line.startswith('- https://github.com/'):
                data['github_related_urls'].append(line.strip("- "))

            elif line.startswith('### Description'):
                in_description = True

            elif in_description:
                if line.startswith('###') and not line.startswith('### Description'):
                    in_description = False
                else:
                    description.append(line.strip())

            elif line.startswith('![](https://img.shields.io/static/v1?label=Product'):
                product_info = line.split('message=')[-1].split('&')[0].replace('%20', ' ')
                data['github_product'] = product_info.strip()

            elif line.startswith('![](https://img.shields.io/static/v1?label=Version'):
                version_info = line.split('message=')[-1].split('&')[0].replace('%20', ' ')
                data['github_version'] = version_info.strip()

            elif 'label=Vulnerability' in line and 'CWE-' in line:
                cwe_info = line.split('message=')[-1].split('&')[0].replace('%20', ' ')
                data['github_cwe'] = cwe_info.strip()

            elif line.lower().startswith('#### github'):
                pocs = []
                poc_index = idx + 1
                while poc_index < len(lines) and lines[poc_index].startswith('- '):
                    poc_link = lines[poc_index].split('- ')[1].strip()
                    pocs.append(poc_link)
                    poc_index += 1
                data['github_pocs'].extend(pocs)

            elif 'mitigates this vulnerability' in line.lower():
                mitigation_info = []
                mitigation_index = idx
                while mitigation_index < len(lines) and not lines[mitigation_index].startswith('###'):
                    mitigation_info.append(lines[mitigation_index].strip())
                    mitigation_index += 1
                data['github_mitigation'] = ' '.join(mitigation_info)

        data['github_description'] = ' '.join(description) if description else None

    except Exception as e:
        print(f"[!] Error parsing data for CVE {cve}: {e}")

    return data
