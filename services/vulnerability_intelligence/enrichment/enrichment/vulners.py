import httpx
from typing import Dict

def vulners_find_related_cve_data(cve: str) -> Dict:
    data = {
        'vulners_related_urls': [],
        'vulners_cvss_score': None,
        'vulners_base_severity': None,
        'vulners_tags': [],
        'vulners_description': None,
        'vulners_publish_date': None
    }
    try:
        response = httpx.get(
            "https://vulners.com/api/v3/search/lucene/",
            params={'query': f'{cve}', 'size': 10},
            timeout=15
        )
        if response.status_code == 200:
            response_data = response.json()
            if response_data.get('result') == 'OK':
                search_results = response_data.get('data', {}).get('search', [])
                for item in search_results:
                    source = item.get('_source', {})

                    href = source.get('href', '')
                    vhref = source.get('vhref', '')
                    if href:
                        data['vulners_related_urls'].append(href)
                    if vhref:
                        data['vulners_related_urls'].append(vhref)

                    if not data['vulners_cvss_score'] and 'cvss' in source:
                        cvss_data = source['cvss']
                        data['vulners_cvss_score'] = str(cvss_data.get('score'))
                        data['vulners_base_severity'] = cvss_data.get('severity')

                    tags = source.get('tags', [])
                    if tags:
                        data['vulners_tags'].extend(tags)

                    if not data['vulners_description']:
                        description = source.get('description', '')
                        data['vulners_description'] = description[:2048] if description else None

                    if not data['vulners_publish_date']:
                        data['vulners_publish_date'] = source.get('published')

    except Exception as e:
        print("[!] Error fetching related data for CVE {cve} from Vulners: {e}")
        return data

    return data
