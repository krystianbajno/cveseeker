import os
import httpx
import logging
from typing import Dict

from services.vulnerability_intelligence.enrichment.enrichment.cache import ensure_cache_dir, is_cache_valid, load_cache, update_cache


def cisa_kev_enrich_vulnerability(cve: str) -> Dict:
    """
    Enrich vulnerability data with CISA KEV information using caching.
    Downloads the CISA KEV catalog at most once every 10 minutes.
    """
    data = {}
    cache_dir = "cache"
    cache_file = os.path.join(cache_dir, "cisa_kev_cache.json")
    cache_duration = 600  # 10 minutes in seconds

    ensure_cache_dir(cache_dir)

    try:
        if is_cache_valid(cache_file, cache_duration):
            kev_data = load_cache(cache_file)
        else:
            logging.info("Downloading CISA KEV catalog...")
            response = httpx.get(
                "https://www.cisa.gov/sites/default/files/feeds/known_exploited_vulnerabilities.json",
                timeout=15
            )
            if response.status_code == 200:
                kev_data = response.json()
                update_cache(cache_file, kev_data)
            else:
                logging.error(f"Failed to fetch CISA KEV catalog. Status code: {response.status_code}")
                return data

        kev_vulnerabilities = kev_data.get("vulnerabilities", [])

        for item in kev_vulnerabilities:
            if item.get("cveID") == cve:
                data = {
                    "cisa_description": item.get("shortDescription"),
                    "cisa_dateAdded": item.get("dateAdded"),
                    "cisa_requiredAction": item.get("requiredAction"),
                    "cisa_dueDate": item.get("dueDate"),
                    "cisa_knownRansomwareCampaignUse": item.get("knownRansomwareCampaignUse"),
                    "cisa_notes": item.get("notes"),
                    "cisa_cwes": item.get("cwes"),
                    "cisa_vulnerabilityName": item.get("vulnerabilityName"),
                    "cisa_vendorProject": item.get("vendorProject"),
                    "cisa_product": item.get("product")
                }
                break

    except Exception as e:
        logging.error(f"Error fetching CISA KEV data for CVE {cve}: {e}")

    return data
