import os
import httpx
import json
from typing import Dict
from threading import Lock
import time

cisa_kev_cache = None
cisa_kev_lock = Lock()

def ensure_cache_dir(cache_dir: str) -> None:
    if not os.path.exists(cache_dir):
        try:
            os.makedirs(cache_dir)
            print(f"Created cache directory at '{cache_dir}'.")
        except Exception as e:
            print(f"Failed to create cache directory '{cache_dir}': {e}")


def is_cache_valid(cache_file: str, cache_duration: int) -> bool:
    if os.path.exists(cache_file):
        cache_mtime = os.path.getmtime(cache_file)
        current_time = time.time()
        if (current_time - cache_mtime) < cache_duration:
            return True
    return False


def load_cache(cache_file: str) -> Dict:
    try:
        with open(cache_file, 'r', encoding='utf-8') as f:
            return json.load(f)
    except Exception as e:
        print(f"Error reading cache file '{cache_file}': {e}")
        return {}


def update_cache(cache_file: str, data: Dict) -> None:
    try:
        with open(cache_file, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=4)
    except Exception as e:
        print(f"Error updating cache file '{cache_file}': {e}")


def cisa_kev_enrich_vulnerability(cve: str) -> Dict:
    global cisa_kev_cache
    cache_dir = "cache"
    cache_file = os.path.join(cache_dir, "cisa_kev_cache.json")
    cache_duration = 600  # 10 minutes
    data = {}

    ensure_cache_dir(cache_dir)

    with cisa_kev_lock:
        if cisa_kev_cache is None:
            if is_cache_valid(cache_file, cache_duration):
                cisa_kev_cache = load_cache(cache_file)
            else:
                try:
                    print("Downloading CISA KEV catalog...")
                    response = httpx.get(
                        "https://www.cisa.gov/sites/default/files/feeds/known_exploited_vulnerabilities.json",
                        timeout=15
                    )
                    if response.status_code == 200:
                        cisa_kev_cache = response.json()
                        update_cache(cache_file, cisa_kev_cache)
                    else:
                        print(f"Failed to fetch CISA KEV catalog. Status code: {response.status_code}")
                        cisa_kev_cache = load_cache(cache_file)
                        if not cisa_kev_cache:
                            print("No valid cached data available.")
                            return data
                except Exception as e:
                    print(f"Error fetching CISA KEV catalog: {e}")
                    cisa_kev_cache = load_cache(cache_file)
                    if not cisa_kev_cache:
                        print("No valid cached data available.")
                        return data

    try:
        kev_vulnerabilities = cisa_kev_cache.get("vulnerabilities", [])
        for item in kev_vulnerabilities:
            if item.get("cveID") == cve:
                data = {
                    "cisa_description": item.get("shortDescription"),
                    "cisa_dateAdded": item.get("dateAdded"),
                    "cisa_requiredAction": item.get("requiredAction"),
                    "cisa_dueDate": item.get("dueDate"),
                    "cisa_knownRansomwareCampaignUse": item.get("knownRansomwareCampaignUse"),
                    "cisa_notes": item.get("notes"),
                    "cisa_cwes": item.get("cwes"),
                    "cisa_vulnerabilityName": item.get("vulnerabilityName"),
                    "cisa_vendorProject": item.get("vendorProject"),
                    "cisa_product": item.get("product")
                }
                break
    except Exception as e:
        print(f"Error processing CISA KEV data for CVE {cve}: {e}")

    return data
