
from services.search.nist_cache_manager import get_cve_data_cache
from services.vulnerabilities.factories.vulnerability_factory import DEFAULT_VALUES
from dateutil import parser as dateutil_parser

def nist_enrich_vulnerability(cve: str) -> dict:
    cve_data_cache = get_cve_data_cache()

    if not cve_data_cache:
        print("[!] NIST CVE data is unavailable.")
        return {}

    data = {}
    try:
        cve_items = cve_data_cache.get("cve_items", [])
        for item in cve_items:
            if item.get("id") == cve:
                descriptions = item.get("descriptions", [])
                description = next(
                    (desc.get("value") for desc in descriptions if desc.get("lang") == "en"), DEFAULT_VALUES["description"]
                )
            
                metrics = item.get("metrics", {}).get("cvssMetricV2", [])
                if metrics:
                    metric = metrics[0]
                    base_score = str(metric.get("cvssData", {}).get("baseScore", "N/A"))
                    base_severity = metric.get("baseSeverity", "N/A")
                else:
                    base_score = "N/A"
                    base_severity = "N/A"

                reference_urls = [ref.get("url") for ref in item.get("references", [])]
                vulnerable_components = []
                configurations = item.get("configurations", [])
                for config in configurations:
                    for node in config.get("nodes", []):
                        for cpe_match in node.get("cpeMatch", []):
                            if cpe_match.get("vulnerable", False):
                                vulnerable_components.append(cpe_match.get("criteria", "N/A"))

                published_date = item.get("published", DEFAULT_VALUES["date"])
                parsed_date = dateutil_parser.parse(published_date)
                date = parsed_date.strftime('%Y-%m-%d')
                
                data = {
                    "nist_description": description,
                    "nist_base_score": base_score,
                    "nist_base_severity": base_severity,
                    "nist_reference_urls": reference_urls,
                    "nist_vulnerable_components": vulnerable_components,
                    "nist_date": date
                }
                break
    except Exception as e:
        print(f"[!] Error processing NIST data for CVE {cve}: {e}")

    return data
