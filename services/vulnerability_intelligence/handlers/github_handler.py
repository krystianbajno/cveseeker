from services.vulnerability_intelligence.handlers.base_handler import BaseHandler
from models.vulnerability_intelligence import VulnerabilityIntelligence
from dateutil import parser as dateutil_parser

class GitHubHandler(BaseHandler):
    def apply(self, vuln_intelligence: VulnerabilityIntelligence):
        try:
            related_urls = self.data.get('github_related_urls', [])
            vuln_intelligence.reference_urls.update(related_urls)

            github_cwe = self.data.get('github_cwe')
            if github_cwe:
                vuln_intelligence.weaknesses.add(github_cwe)

            github_pocs = self.data.get('github_pocs', [])
            vuln_intelligence.reference_urls.update(github_pocs)

            github_mitigation = self.data.get('github_mitigation')
            if github_mitigation:
                formatted_mitigation = f"{github_mitigation.replace('\n', ' ')}"
                vuln_intelligence.descriptions.append({
                    "source": self.enrich_source_name_mitigation("GitHub"),
                    "text": formatted_mitigation,
                    "date": self._parse_date(self.data.get('vulners_publish_date'))
                })

            github_tags = self.data.get('github_tags', [])
            vuln_intelligence.tags.update(github_tags)

            github_product = self.data.get('github_product')
            if github_product:
                vuln_intelligence.tags.add(github_product)

            github_version = self.data.get('github_version')
            if github_version:
                vuln_intelligence.vulnerable_components.add(github_version)

            github_description = self.data.get('github_description')
            if github_description:
                formatted_description = f"{github_description.replace('\n', ' ')}"
                if not any(desc["text"] == formatted_description for desc in vuln_intelligence.descriptions):
                    vuln_intelligence.descriptions.append({
                        "source": self.enrich_source_name("GitHub"),
                        "text": formatted_description,
                        "date": self._parse_date(self.data.get('vulners_publish_date'))
                    })

        except Exception as e:
            print(f"[!] Error applying GitHub enrichment: {e}")

    def _parse_date(self, date_str: str) -> str:
        if not date_str:
            return "N/A"
        try:
            parsed_date = dateutil_parser.parse(date_str)
            return parsed_date.strftime("%Y-%m-%d")
        except Exception as e:
            print(f"[!] Error parsing date '{date_str}': {e}")
            return "N/A"
